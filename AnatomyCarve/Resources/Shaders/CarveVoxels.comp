#version 430

// work‐group size; tune to your GPU and volume size
layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

// the sphere details which do the carving. x,y,z are typical position and the w is the radius
uniform vec4 sphereDetails;

// the model matrix of the color volume 
uniform mat4 modelMatrix;

// binding 0: output coloured volume (8-bit RGBA image)
layout(binding = 0, rgba32f) uniform image3D colorVolume;

// binding 1: input label map (unsigned integer 3D image)
layout(binding = 1, r32i) readonly uniform iimage3D labelMap;

// binding 2: 
layout(binding = 2, r32f) readonly uniform image3D intensityVolume;

// Array of in values where 0 is false and 1 is true that dictates whether or not the label is visible
layout(binding = 3, r32i) readonly uniform iimage2D mask;

void main() {
    ivec3 dimensions = imageSize(colorVolume);
    ivec3 coord = ivec3(gl_GlobalInvocationID.xyz);

    if (coord.x >= dimensions.x || coord.y >= dimensions.y || coord.z >= dimensions.z)
    {
        return;
    }

    // load the label (uvec4.x holds our label)
    int label = imageLoad(labelMap, coord).x;

    if (label == 0)
    {
        return;
    }

    vec4 threeDPoint = modelMatrix * vec4(gl_GlobalInvocationID.xyz, 1.0);
    vec3 pos = (threeDPoint / threeDPoint.w).xyz;
    
    float distanceToSphere = length(pos - sphereDetails.xyz);
    
    vec4 color = imageLoad(colorVolume, coord);

    int clippable = imageLoad(mask, ivec2(label, 0)).r;

    float intensity = imageLoad(intensityVolume, coord).r;

    // intensity = (intensity - -1074.0) / (3291.0 - -1074.0);

    if (distanceToSphere <= sphereDetails.w && clippable == 0)
    {
        color.a = 0.0;    
    }
    else
    {
        color.a = intensity;
    }

    imageStore(colorVolume, coord, color);
}