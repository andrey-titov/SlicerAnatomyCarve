#version 430

#define MAX_SPHERES 32
#define SAMPLES_COUNT 5

// work‐group size; tune to your GPU and volume size
layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

// the sphere details which do the carving. x,y,z are typical position and the w is the radius
uniform vec4 sphereDetails[MAX_SPHERES];
uniform int sphereCount;

// the model matrix of the color volume 
uniform mat4 modelMatrix;

// binding 0: output coloured volume (8-bit RGBA image)
layout(binding = 0, rgba32f) uniform writeonly image3D outputVolume;

// binding 1: input label map (unsigned integer 3D image)
layout(binding = 1, r16ui) uniform readonly uimage3D labelMap;

// binding 2: 
layout(binding = 2, r32f) uniform readonly image3D intensityVolume;

// Array of in values where 0 is false and 1 is true that dictates whether or not the label is visible
layout(binding = 3, r8ui) uniform readonly uimage2D mask;

layout(binding = 4, rgba8) uniform readonly image3D colorVolume;

// 5 opposing corners of the [-1,1]^3 cube, plus the center
const vec3 SAMPLE_POINTS[SAMPLES_COUNT] = vec3[SAMPLES_COUNT](
    vec3( 0.0,  0.0,  0.0),  // center
    vec3(-1.0, -1.0, -1.0),
    vec3( 1.0,  1.0, -1.0),
    vec3( 1.0, -1.0,  1.0),
    vec3(-1.0,  1.0,  1.0)
);

// // 8 corners of the [-1,1]^3 cube, plus the center
// const vec3 SAMPLE_POINTS[SAMPLES_COUNT] = vec3[SAMPLES_COUNT](
//     vec3(-1.0, -1.0, -1.0),
//     vec3(-1.0, -1.0,  1.0),
//     vec3(-1.0,  1.0, -1.0),
//     vec3(-1.0,  1.0,  1.0),
//     vec3( 1.0, -1.0, -1.0),
//     vec3( 1.0, -1.0,  1.0),
//     vec3( 1.0,  1.0, -1.0),
//     vec3( 1.0,  1.0,  1.0),
//     vec3( 0.0,  0.0,  0.0)  // center
// );

// // 16 random points in [-1,1]^3
// const vec3 SAMPLE_POINTS[SAMPLES_COUNT] = vec3[SAMPLES_COUNT](
//     vec3( 0.6888,  0.5159, -0.1589),
//     vec3(-0.4822,  0.0225, -0.1901),
//     vec3( 0.5676, -0.3934, -0.0468),
//     vec3( 0.1668,  0.8162,  0.0094),
//     vec3(-0.4363,  0.5116,  0.2367),
//     vec3(-0.4990,  0.8195,  0.9656),
//     vec3( 0.6204,  0.8043, -0.3797),
//     vec3( 0.4597,  0.7977,  0.3680),
//     vec3(-0.0557, -0.7986, -0.1317),
//     vec3( 0.2218,  0.8260,  0.9332),
//     vec3(-0.0460,  0.7306, -0.4790),
//     vec3( 0.6101,  0.0974, -0.9719),
//     vec3( 0.4394, -0.2024,  0.6497),
//     vec3( 0.3363, -0.9977, -0.0128),
//     vec3( 0.7352, -0.5122, -0.3496),
//     vec3( 0.7409, -0.6179,  0.1350)
// );

// const vec3 SAMPLE_POINTS[SAMPLES_COUNT] = vec3[SAMPLES_COUNT](
//     vec3( 0.6888,  0.5159, -0.1589),
//     vec3(-0.4822,  0.0225, -0.1901),
//     vec3( 0.5676, -0.3934, -0.0468),
//     vec3( 0.1668,  0.8162,  0.0094),
//     vec3(-0.4363,  0.5116,  0.2367),
//     vec3(-0.4990,  0.8195,  0.9656),
//     vec3( 0.6204,  0.8043, -0.3797),
//     vec3( 0.4597,  0.7977,  0.3680),
//     vec3(-0.0557, -0.7986, -0.1317),
//     vec3( 0.2218,  0.8260,  0.9332),
//     vec3(-0.0460,  0.7306, -0.4790),
//     vec3( 0.6101,  0.0974, -0.9719),
//     vec3( 0.4394, -0.2024,  0.6497),
//     vec3( 0.3363, -0.9977, -0.0128),
//     vec3( 0.7352, -0.5122, -0.3496),
//     vec3( 0.7409, -0.6179,  0.1350),
//     vec3(-0.5228,  0.9351,  0.6064),
//     vec3(-0.1041, -0.8391, -0.3599),
//     vec3( 0.0159,  0.8657, -0.7819),
//     vec3( 0.1025,  0.4131,  0.0949),
//     vec3( 0.6289,  0.0806,  0.9277),
//     vec3( 0.2064,  0.1752, -0.1100),
//     vec3( 0.1926, -0.2302,  0.1513),
//     vec3(-0.4193, -0.6212, -0.6265),
//     vec3( 0.2255,  0.3133, -0.0469),
//     vec3(-0.8204,  0.5152,  0.7535),
//     vec3( 0.8468,  0.6849,  0.7963),
//     vec3( 0.8462,  0.0812, -0.2174),
//     vec3( 0.4106, -0.4487,  0.6233),
//     vec3( 0.6990,  0.7901,  0.1796),
//     vec3( 0.8995,  0.1594, -0.0989),
//     vec3( 0.3205,  0.9925,  0.8339)
// );


void main() {
    ivec3 dimensions = imageSize(outputVolume);
    ivec3 coord = ivec3(gl_GlobalInvocationID.xyz);

    if (coord.x >= dimensions.x || coord.y >= dimensions.y || coord.z >= dimensions.z)
    {
        return;
    }

    // load the label (uvec4.x holds our label)
    uint label = imageLoad(labelMap, coord).x;

    if (label == 0)
    {
        imageStore(outputVolume, coord, vec4(0, 0, 0, 0));
        return;
    }

    bool segmentIsCarved[MAX_SPHERES];

    for (uint i = 0; i < sphereCount; ++i) 
    {
        uint maskValue = imageLoad(mask, ivec2(label, i)).r;
        segmentIsCarved[i] = (maskValue == 0);
    }

    // For every sample, we calculate if it is clipped by at least one sphere, and then we aggregate the results
    int visibleSamples = 0;
    for (int s = 0; s < SAMPLES_COUNT; ++s) 
    {
        bool clipped = false;
        for (uint i = 0; i < sphereCount; ++i) 
        {
            // Clipped for current sphere if the point is inside the sphere
            vec4 threeDPoint = modelMatrix * vec4(vec3(gl_GlobalInvocationID.xyz) + SAMPLE_POINTS[s], 1.0);
            vec3 pos = (threeDPoint / threeDPoint.w).xyz;
            bool pointInsideSphere = length(pos - sphereDetails[i].xyz) < sphereDetails[i].w;
            bool voxelIsCarved = segmentIsCarved[i] && pointInsideSphere;

            clipped = clipped || voxelIsCarved;
        }

        visibleSamples += clipped ? 0 : 1;
    }

    float opacityAA = float(visibleSamples) / float(SAMPLES_COUNT);
    
    vec4 color = imageLoad(colorVolume, coord);

    // if (clipped)
    // {
    //     color.a = 0.0;    
    // }
    // else
    // {
    //     float intensity = imageLoad(intensityVolume, coord).r;
    //     color.a = intensity;
    // }

    float intensity = imageLoad(intensityVolume, coord).r;
    color.a = intensity * opacityAA;
    imageStore(outputVolume, coord, color);
}